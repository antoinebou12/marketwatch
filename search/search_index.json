{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Marketwatch API Python Library","text":"<p>https://www.marketwatch.com</p> <p>A Python libary to interact with the MarketWatch Stock Market Game Based on code from</p> <ul> <li>https://github.com/kevindong/MarketWatch_API/</li> <li>https://github.com/bwees/pymarketwatch</li> </ul>"},{"location":"#installation","title":"Installation","text":"<pre><code>pip install marketwatch\n</code></pre> <pre><code>pip install git+https://github.com/antoinebou12/marketwatch.git\n</code></pre> <pre><code>git clone https://github.com/antoinebou12/marketwatch.git\n</code></pre>"},{"location":"#usage","title":"Usage","text":""},{"location":"#import","title":"Import","text":"<pre><code>from marketwatch import MarketWatch\n</code></pre>"},{"location":"#login","title":"Login","text":"<pre><code>marketwatch = MarketWatch(username, password)\n</code></pre>"},{"location":"#get-price","title":"Get Price","text":"<pre><code>marketwatch.get_price(\"AAPL\")\n</code></pre>"},{"location":"#get-games","title":"Get Games","text":"<pre><code>marketwatch.get_games()\n</code></pre>"},{"location":"#get-game","title":"Get Game","text":"<pre><code>marketwatch.get_game(\"game-name\")\n</code></pre>"},{"location":"#get-game-settings","title":"Get Game Settings","text":"<pre><code>marketwatch.get_game_settings(\"game-name\")\n</code></pre>"},{"location":"#get-leaderboard","title":"Get Leaderboard","text":"<pre><code>marketwatch.get_leaderboard(\"game-name\")\n</code></pre>"},{"location":"#get-portfolio","title":"Get Portfolio","text":"<pre><code>marketwatch.get_portfolio(\"game-name\")\n</code></pre>"},{"location":"#get-positions","title":"Get Positions","text":"<pre><code>marketwatch.get_positions(\"game-name\")\n</code></pre>"},{"location":"#get-pending-orders","title":"Get Pending Orders","text":"<pre><code>marketwatch.get_pending_orders(\"game-name\")\n</code></pre>"},{"location":"#buy","title":"Buy","text":"<pre><code>marketwatch.buy(\"game-name\", \"AAPL\", 100)\n</code></pre>"},{"location":"#sell","title":"Sell","text":"<pre><code>marketwatch.sell(\"game-name\", \"AAPL\", 100)\n</code></pre>"},{"location":"#example","title":"Example","text":"<pre><code>if __name__ == \"__main__\":\n    import os\n    username = os.environ.get(\"MARKETWATCH_USERNAME\")\n    password = os.environ.get(\"MARKETWATCH_PASSWORD\")\n\n    marketwatch = MarketWatch(username, password)\n\n    print(f\"Price: {marketwatch.get_price('AAPL')} \\n\")\n    print(f\"Games: {marketwatch.get_games()} \\n\")\n\n    games1 = marketwatch.get_games()[0][\"name\"].lower().replace(\" \", \"-\")\n\n    print(f\"Game: {marketwatch.get_game(games1)} \\n\")\n    print(f\"Game Settings: {marketwatch.get_game_settings(games1)} \\n\")\n\n    print(f\"Leaderboard: {marketwatch.get_leaderboard(games1)} \\n\")\n    print(f\"Porfolio: {marketwatch.get_portfolio(games1)} \\n\")\n\n    print(f\"Position: {marketwatch.get_positions(games1)}\")\n    print(f\"Orders Pending: {marketwatch.get_pending_orders(games1)}\")\n    marketwatch.buy(games1, \"AAPL\", 100)\n\n    print(f\"Position diff: {marketwatch.get_positions(games1)}\")\n</code></pre>"},{"location":"about/","title":"About","text":"<p>This is a Python library for interacting with the MarketWatch virtual trading platform. The library provides an easy-to-use interface for performing various actions such as getting game details, portfolio information, buying and selling stocks, getting leaderboard information, and more.</p> <p> </p> <p>The MarketWatch Python library is a powerful tool for interacting with the MarketWatch virtual trading platform. Whether you're a seasoned trader or a beginner, this library provides an easy-to-use interface for performing various actions such as getting game details, portfolio information, buying and selling stocks, getting leaderboard information, and more.</p> <p>This library is particularly useful for users who want to automate their trading strategies or build trading bots. In this article, we will provide an explanation of the code and show how to get started with using the MarketWatch Python library.</p> <p>Python package called <code>marketwatch</code>, which provides an API for accessing financial data from MarketWatch. The package has a version number of <code>0.1.5</code> and is licensed under the Apache License 2.0.</p> <p>The package has several dependencies listed, including <code>httpx</code>, <code>beautifulsoup4</code>, and <code>rich</code>. These are libraries that the package relies on to function properly.</p> <p>Based on this information, it seems like you are well on your way to creating a useful Python package for accessing financial data from MarketWatch! If you have any specific questions or need further assistance, feel free to ask.</p>"},{"location":"api/","title":"API Reference","text":""},{"location":"api/#import","title":"Import","text":"<pre><code>from marketwatch import MarketWatch\n</code></pre>"},{"location":"api/#login","title":"Login","text":"<pre><code>marketwatch = MarketWatch(username, password)\n</code></pre>"},{"location":"api/#get-price","title":"Get Price","text":"<pre><code>marketwatch.get_price(\"AAPL\")\n</code></pre>"},{"location":"api/#get-games","title":"Get Games","text":"<pre><code>marketwatch.get_games()\n</code></pre>"},{"location":"api/#get-game","title":"Get Game","text":"<pre><code>marketwatch.get_game(\"game-name\")\n</code></pre>"},{"location":"api/#get-game-settings","title":"Get Game Settings","text":"<pre><code>marketwatch.get_game_settings(\"game-name\")\n</code></pre>"},{"location":"api/#get-leaderboard","title":"Get Leaderboard","text":"<pre><code>marketwatch.get_leaderboard(\"game-name\")\n</code></pre>"},{"location":"api/#get-portfolio","title":"Get Portfolio","text":"<pre><code>marketwatch.get_portfolio(\"game-name\")\n</code></pre>"},{"location":"api/#get-portfolio-performance","title":"Get Portfolio Performance","text":"<pre><code>marketwatch.get_portfolio_performance(\"game-name\")\n</code></pre>"},{"location":"api/#get-transactions","title":"Get Transactions","text":"<pre><code>marketwatch.get_transactions(\"game-name\")\n</code></pre>"},{"location":"api/#get-positions","title":"Get Positions","text":"<pre><code>marketwatch.get_positions(\"game-name\")\n</code></pre>"},{"location":"api/#get-pending-orders","title":"Get Pending Orders","text":"<pre><code>marketwatch.get_pending_orders(\"game-name\")\n</code></pre>"},{"location":"api/#buy","title":"Buy","text":"<pre><code>marketwatch.buy(\"game-name\", \"AAPL\", 100)\n</code></pre>"},{"location":"api/#sell","title":"Sell","text":"<pre><code>marketwatch.sell(\"game-name\", \"AAPL\", 100)\n</code></pre>"},{"location":"contacts/","title":"Contact","text":"<p>If you have any questions or comments regarding the MarketWatch Python library, please feel free to contact the developer through the following channels:</p>"},{"location":"contacts/#github","title":"Github","text":"<p>The source code for the MarketWatch Python library can be found on Github at</p> <p>https://github.com/antoinebou12/MarketWatch</p> <p>You can create an issue or pull request on the repository page for any bugs or feature requests.</p>"},{"location":"contacts/#twitter","title":"Twitter","text":"<p>You can also follow the developer on Twitter at</p> <p>https://twitter.com/antoinebou12</p> <p>for updates on the library and other projects.</p>"},{"location":"contacts/#linkedin","title":"Linkedin","text":"<p>The developer's LinkedIn profile can be found at</p> <p>https://linkedin.com/in/antoinebou12</p> <p>Feel free to connect with the developer on LinkedIn to discuss the library or other topics.</p> <p>Thank you for your interest in the MarketWatch Python library!</p>"},{"location":"contacts/#funding","title":"Funding","text":""},{"location":"examples/","title":"Examples","text":""},{"location":"examples/#example","title":"Example","text":"<p>This code snippet shows an example usage of the <code>MarketWatch</code> class. It first imports the <code>os</code> module and uses it to retrieve the user's MarketWatch username and password from the environment variables <code>MARKETWATCH_USERNAME</code> and <code>MARKETWATCH_PASSWORD</code>. It then creates a <code>MarketWatch</code> object with these credentials.</p> <p>The example code then demonstrates the usage of several methods provided by the <code>MarketWatch</code> class, including:</p> <ul> <li><code>get_price(ticker)</code>: This method takes a stock ticker as an argument and returns its current price.</li> <li><code>get_games()</code>: This method returns a list of games the user is currently playing on MarketWatch.</li> <li><code>get_game(game_id)</code>: This method takes a game ID as an argument and returns details about the game, such as its name, start and end dates, and current ranking.</li> <li><code>get_game_settings(game_id)</code>: This method takes a game ID as an argument and returns its settings, such as the starting cash balance and trading rules.</li> <li><code>get_leaderboard(game_id)</code>: This method takes a game ID as an argument and returns the current leaderboard for that game.</li> <li><code>get_portfolio(game_id)</code>: This method takes a game ID as an argument and returns the user's portfolio for that game, including information such as the quantity and value of each holding.</li> <li><code>get_positions(game_id)</code>: This method takes a game ID as an argument and returns the user's current positions for that game.</li> <li><code>get_pending_orders(game_id)</code>: This method takes a game ID as an argument and returns the user's pending orders for that game.</li> <li><code>buy(game_id, ticker, quantity)</code>: This method takes a game ID, stock ticker, and quantity as arguments and places a buy order for the specified quantity of shares.</li> </ul> <pre><code>if __name__ == \"__main__\":\n    import os\n    username = os.environ.get(\"MARKETWATCH_USERNAME\")\n    password = os.environ.get(\"MARKETWATCH_PASSWORD\")\n\n    marketwatch = MarketWatch(username, password)\n\n    print(f\"Price: {marketwatch.get_price('AAPL')} \\n\")\n    print(f\"Games: {marketwatch.get_games()} \\n\")\n\n    games1 = marketwatch.get_games()[0][\"name\"].lower().replace(\" \", \"-\")\n\n    print(f\"Game: {marketwatch.get_game(games1)} \\n\")\n    print(f\"Game Settings: {marketwatch.get_game_settings(games1)} \\n\")\n\n    print(f\"Leaderboard: {marketwatch.get_leaderboard(games1)} \\n\")\n    print(f\"Porfolio: {marketwatch.get_portfolio(games1)} \\n\")\n\n    print(f\"Position: {marketwatch.get_positions(games1)}\")\n    print(f\"Orders Pending: {marketwatch.get_pending_orders(games1)}\")\n    marketwatch.buy(games1, \"AAPL\", 100)\n\n    print(f\"Position diff: {marketwatch.get_positions(games1)}\")\n</code></pre> <pre><code>Example:\n    &gt;&gt;&gt; from marketwatch import MarketWatch\n        &gt;&gt;&gt; import os\n    &gt;&gt;&gt; mw = MarketWatch(os.environ[\"MARKETWATCH_USERNAME\"], os.environ[\"MARKETWATCH_PASSWORD\"])\n    &gt;&gt;&gt; mw.get_games()\n    &gt;&gt;&gt; mw.get_portfolio('algoets-h2023')\n    &gt;&gt;&gt; mw.buy('algoets-h2023', \"AAPL\", 1)\n    &gt;&gt;&gt; mw.get_leaderboard('algoets-h2023')\nResults:\n    &gt;&gt;&gt; mw = MarketWatch(os.environ[\"MARKETWATCH_USERNAME\"], os.environ[\"MARKETWATCH_PASSWORD\"])\n        Login successful\n        Logged in as Antoine Boucher\n    &gt;&gt;&gt; mw.get_games()\n        [{'name': 'ALGOETS-H2023', 'url': 'https://www.marketwatch.com/games/algoets-h2023', 'id': 'algoets-h2023',                 'return': '0.17%', 'total_return': '-$1,975.21', 'rank': '17', 'end': '3/31/23', 'players': '27'}]\n    &gt;&gt;&gt; mw.get_portfolio('algoets-h2023')\n{'portfolio': [{'sign': '+', 'ticker': 'AAPD', 'quantity': '12 Shares', 'holding': '\\nBuy\\n', 'holding_percentage': '&lt; 1%', 'price': '$24.63', 'price_gain': '0.33', 'price_gain_percentage': '1.36%', 'value': '$295.56', 'value_percentage': '1.19%', 'value_point': '$3.48'}, {'sign': '-', 'ticker': 'AAPL', 'quantity': '589 Shares', 'holding': '\\nBuy\\n', 'holding_percentage': '11%', 'price': '$158.28', 'price_gain': '-1.97', 'price_gain_percentage': '-1.23%', 'value': '$93,226.92', 'value_percentage': '-0.81%', 'value_point': '-$758.50'}, {'sign': '+', 'ticker': 'AAPL', 'quantity': '47 Shares', 'holding': '\\nShort\\n', 'holding_percentage': '&lt; 1%', 'price': '$158.28', 'price_gain': '-1.97', 'price_gain_percentage': '-1.23%', 'value': '$7,439.16', 'value_percentage': '1.03%', 'value_point': '$77.43'}, {'sign': '+', 'ticker': 'ANCTF', 'quantity': '400 Shares', 'holding': '\\nBuy\\n', 'holding_percentage': '2%', 'price': '$47.80', 'price_gain': '0.75', 'price_gain_percentage': '1.59%', 'value': '$19,120.00', 'value_percentage': '1.58%', 'value_point': '$298.05'}, {'sign': '+', 'ticker': 'BAC', 'quantity': '100 Shares', 'holding': '\\nBuy\\n', 'holding_percentage': '&lt; 1%', 'price': '$28.49', 'price_gain': '1.35', 'price_gain_percentage': '4.97%', 'value': '$2,849.00', 'value_percentage': '1.53%', 'value_point': '$43.00'}, {'sign': '-', 'ticker': 'BLK', 'quantity': '100 Shares', 'holding': '\\nBuy\\n', 'holding_percentage': '8%', 'price': '$648.32', 'price_gain': '3.44', 'price_gain_percentage': '0.53%', 'value': '$64,832.00', 'value_percentage': '-1.56%', 'value_point': '-$1,025.00'}, {'sign': '-', 'ticker': 'BMO', 'quantity': '250 Shares', 'holding': '\\nBuy\\n', 'holding_percentage': '3%', 'price': '$85.78', 'price_gain': '1.23', 'price_gain_percentage': '1.45%', 'value': '$21,445.00', 'value_percentage': '-0.69%', 'value_point': '-$148.75'}, {'sign': '-', 'ticker': 'COIN', 'quantity': '120 Shares', 'holding': '\\nBuy\\n', 'holding_percentage': '&lt; 1%', 'price': '$62.54', 'price_gain': '-5.29', 'price_gain_percentage': '-7.80%', 'value': '$7,504.80', 'value_percentage': '-4.37%', 'value_point': '-$343.20'}, {'sign': '+', 'ticker': 'CPRT', 'quantity': '1 Shares', 'holding': '\\nBuy\\n', 'holding_percentage': '&lt; 1%', 'price': '$72.73', 'price_gain': '1.30', 'price_gain_percentage': '1.82%', 'value': '$72.73', 'value_percentage': '1.41%', 'value_point': '$1.01'}, {'sign': '+', 'ticker': 'DLMAF', 'quantity': '500 Shares', 'holding': '\\nBuy\\n', 'holding_percentage': '3%', 'price': '$57.14', 'price_gain': '0.19', 'price_gain_percentage': '0.33%', 'value': '$28,570.00', 'value_percentage': '0.47%', 'value_point': '$132.30'}, {'sign': '+', 'ticker': 'GE', 'quantity': '500 Shares', 'holding': '\\nBuy\\n', 'holding_percentage': '6%', 'price': '$93.31', 'price_gain': '1.94', 'price_gain_percentage': '2.12%', 'value': '$46,655.00', 'value_percentage': '2.84%', 'value_point': '$1,290.00'}, {'sign': '+', 'ticker': 'MA', 'quantity': '700 Shares', 'holding': '\\nBuy\\n', 'holding_percentage': '30%', 'price': '$354.62', 'price_gain': '2.99', 'price_gain_percentage': '0.85%', 'value': '$248,234.00', 'value_percentage': '0.21%', 'value_point': '$511.00'}, {'sign': '-', 'ticker': 'META', 'quantity': '300 Shares', 'holding': '\\nBuy\\n', 'holding_percentage': '7%', 'price': '$202.84', 'price_gain': '-3.17', 'price_gain_percentage': '-1.54%', 'value': '$60,852.00', 'value_percentage': '-1.11%', 'value_point': '-$684.00'}, {'sign': '-', 'ticker': 'ROST', 'quantity': '400 Shares', 'holding': '\\nBuy\\n', 'holding_percentage': '5%', 'price': '$100.63', 'price_gain': '-0.70', 'price_gain_percentage': '-0.69%', 'value': '$40,252.00', 'value_percentage': '-1.89%', 'value_point': '-$777.50'}, {'sign': '-', 'ticker': 'RY', 'quantity': '500 Shares', 'holding': '\\nBuy\\n', 'holding_percentage': '6%', 'price': '$93.55', 'price_gain': '1.36', 'price_gain_percentage': '1.48%', 'value': '$46,775.00', 'value_percentage': '-0.78%', 'value_point': '-$365.55'}, {'sign': '+', 'ticker': 'TD', 'quantity': '250 Shares', 'holding': '\\nBuy\\n', 'holding_percentage': '2%', 'price': '$57.93', 'price_gain': '1.38', 'price_gain_percentage': '2.44%', 'value': '$14,482.50', 'value_percentage': '1.38%', 'value_point': '$197.50'}, {'sign': '+', 'ticker': 'TSN', 'quantity': '100 Shares', 'holding': '\\nBuy\\n', 'holding_percentage': '&lt; 1%', 'price': '$57.99', 'price_gain': '0.93', 'price_gain_percentage': '1.63%', 'value': '$5,799.00', 'value_percentage': '1.44%', 'value_point': '$82.50'}, {'sign': '+', 'ticker': 'V', 'quantity': '500 Shares', 'holding': '\\nBuy\\n', 'holding_percentage': '14%', 'price': '$221.81', 'price_gain': '0.77', 'price_gain_percentage': '0.35%', 'value': '$110,905.00', 'value_percentage': '0.68%', 'value_point': '$750.00'}], 'portfolio_value': '$998,024.79', 'gain_percentage': '0.17%', 'gain': '-$1,975.21', 'return': '-0.20%', 'cash_remaining': '$186,076.85', 'buying_power': '$71,408.88', 'shorts_reserve': '$7,516.59', 'cash_borrowed': '$0.00', 'portfolio_allocation': []}\n    &gt;&gt; mw.get_leaderboard('algoets-h2023')\n    [{'rank': 'N/A', 'player': 'N/A', 'player_url': 'N/A', 'portfolio_value': 'N/A', 'gain_percentage': 'N/A', 'transactions': 'N/A', 'gain': 'N/A'}, {'rank': '1', 'player': 'Gabriel B', 'player_url': 'https://www.marketwatch.com/games/algoets-h2023/portfolio?pub=aRxpqLsZV3bh', 'portfolio_value': '$1,058,554.25', 'gain_percentage': '5.17%', 'transactions': '9', 'gain': '$58,554.25'}, {'rank': '2', 'player': 'Eric Li', 'player_url': 'https://www.marketwatch.com/games/algoets-h2023/portfolio?pub=AyX19mUAFYLl', 'portfolio_value': '$1,050,503.94', 'gain_percentage': '0.00%', 'transactions': '10', 'gain': '$50,503.94'}, {'rank': '3', 'player': 'Marcelo Guzman', 'player_url': 'https://www.marketwatch.com/games/algoets-h2023/portfolio?pub=UF59tiipo7SI', 'portfolio_value': '$1,027,631.05', 'gain_percentage': '0.41%', 'transactions': '12', 'gain': '$27,631.05'}, {'rank': '4', 'player': 'salim hmidi', 'player_url': 'https://www.marketwatch.com/games/algoets-h2023/portfolio?pub=OYkxYr5vOgZn', 'portfolio_value': '$1,024,083.28', 'gain_percentage': '0.73%', 'transactions': '23', 'gain': '$24,083.28'}, {'rank': '5', 'player': 'Belet Cl\u00e9ment', 'player_url': 'https://www.marketwatch.com/games/algoets-h2023/portfolio?pub=wvxYWSVAE28A', 'portfolio_value': '$1,019,546.45', 'gain_percentage': '-0.59%', 'transactions': '25', 'gain': '$19,546.45'}, {'rank': '6', 'player': 'Dickson Chea', 'player_url': 'https://www.marketwatch.com/games/algoets-h2023/portfolio?pub=pbdnS0kYwMqt', 'portfolio_value': '$1,018,345.98', 'gain_percentage': '0.13%', 'transactions': '5', 'gain': '$18,345.98'}, {'rank': '7', 'player': 'Yannis Yapo', 'player_url': 'https://www.marketwatch.com/games/algoets-h2023/portfolio?pub=QpP_TrwKu562', 'portfolio_value': '$1,018,001.53', 'gain_percentage': '1.60%', 'transactions': '24', 'gain': '$18,001.53'}, {'rank': '8', 'player': 'Marius DELEUIL', 'player_url': 'https://www.marketwatch.com/games/algoets-h2023/portfolio?pub=5KAMIinx8frR', 'portfolio_value': '$1,016,723.61', 'gain_percentage': '3.92%', 'transactions': '37', 'gain': '$16,723.61'}, {'rank': '9', 'player': 'Anthony Gomes', 'player_url': 'https://www.marketwatch.com/games/algoets-h2023/portfolio?pub=e7PoS_mV73Vl', 'portfolio_value': '$1,016,281.94', 'gain_percentage': '-1.64%', 'transactions': '4', 'gain': '$16,281.94'}, {'rank': '10', 'player': 'Sourivong Keoborakoth', 'player_url': 'https://www.marketwatch.com/games/algoets-h2023/portfolio?pub=rlrO8fbS5XvG', 'portfolio_value': '$1,013,989.90', 'gain_percentage': '0.22%', 'transactions': '3', 'gain': '$13,989.90'}, {'rank': '11', 'player': 'Raphael Leblanc', 'player_url': 'https://www.marketwatch.com/games/algoets-h2023/portfolio?pub=RkriElAkDawr', 'portfolio_value': '$1,005,545.78', 'gain_percentage': '3.24%', 'transactions': '3', 'gain': '$5,545.78'}, {'rank': '12', 'player': 'Ariel Sashcov', 'player_url': 'https://www.marketwatch.com/games/algoets-h2023/portfolio?pub=lFPDAA1uqVwU', 'portfolio_value': '$1,002,891.74', 'gain_percentage': '-0.18%', 'transactions': '10', 'gain': '$2,891.74'}, {'rank': '13', 'player': 'oue oue', 'player_url': 'https://www.marketwatch.com/games/algoets-h2023/portfolio?pub=_fnpQ0VQWYw4', 'portfolio_value': '$1,001,443.57', 'gain_percentage': '0.19%', 'transactions': '1', 'gain': '$1,443.57'}, {'rank': '14', 'player': 'Alexis Macagno', 'player_url': 'https://www.marketwatch.com/games/algoets-h2023/portfolio?pub=fS8fkt43cXPF', 'portfolio_value': '$1,001,132.13', 'gain_percentage': '0.27%', 'transactions': '6', 'gain': '$1,132.13'}, {'rank': '15', 'player': 'Nadim Mejri', 'player_url': 'https://www.marketwatch.com/games/algoets-h2023/portfolio?pub=QC9NsO3vvpgO', 'portfolio_value': '$1,000,320.86', 'gain_percentage': '-0.15%', 'transactions': '22', 'gain': '$320.86'}, {'rank': '16', 'player': 'Wiamou Odilon Kohoun', 'player_url': 'https://www.marketwatch.com/games/algoets-h2023/portfolio?pub=nXN7msIbjGBw', 'portfolio_value': '$1,000,079.87', 'gain_percentage': '0.00%', 'transactions': '4', 'gain': '$79.87'}, {'rank': '17', 'player': 'Antoine Boucher', 'player_url': 'https://www.marketwatch.com/games/algoets-h2023/portfolio?pub=_7g9NEC9_Eqy', 'portfolio_value': '$998,024.79', 'gain_percentage': '0.17%', 'transactions': '256', 'gain': '-$1,975.21'}, {'rank': '18', 'player': 'Michel-Ange Rodriguez', 'player_url': 'https://www.marketwatch.com/games/algoets-h2023/portfolio?pub=WbjMeERMT_K9', 'portfolio_value': '$980,616.14', 'gain_percentage': '-1.37%', 'transactions': '1', 'gain': '-$19,383.86'}, {'rank': '19', 'player': 'Kevin D', 'player_url': 'https://www.marketwatch.com/games/algoets-h2023/portfolio?pub=L4yFHrYxv8Zt', 'portfolio_value': '$976,684.77', 'gain_percentage': '0.55%', 'transactions': '6', 'gain': '-$23,315.23'}, {'rank': '20', 'player': 'Mohamed Ilias', 'player_url': 'https://www.marketwatch.com/games/algoets-h2023/portfolio?pub=3OFiPTAQg0sW', 'portfolio_value': '$957,943.44', 'gain_percentage': '-2.79%', 'transactions': '8', 'gain': '-$42,056.57'}, {'rank': '21', 'player': 'Florent Duchesne', 'player_url': 'https://www.marketwatch.com/games/algoets-h2023/portfolio?pub=lBPD30iAGrV3', 'portfolio_value': '$879,949.53', 'gain_percentage': '-7.70%', 'transactions': '1', 'gain': '-$120,050.47'}, {'rank': 'N/A', 'player': 'Sadia Hussain', 'player_url': 'https://www.marketwatch.com/games/algoets-h2023/portfolio?pub=3eF9rBieBk_R', 'portfolio_value': '$1,000,000.00', 'gain_percentage': '0.00%', 'transactions': '0', 'gain': '$0.00'}, {'rank': 'N/A', 'player': 'Ilyes Essid', 'player_url': 'https://www.marketwatch.com/games/algoets-h2023/portfolio?pub=h56WzTZABaMW', 'portfolio_value': '$1,000,000.00', 'gain_percentage': '0.00%', 'transactions': '0', 'gain': '$0.00'}, {'rank': 'N/A', 'player': 'Ilyes Essid', 'player_url': 'https://www.marketwatch.com/games/algoets-h2023/portfolio?pub=uqVnT7cFiwFR', 'portfolio_value': '$1,000,000.00', 'gain_percentage': '0.00%', 'transactions': '0', 'gain': '$0.00'}, {'rank': 'N/A', 'player': 'mathieu rochat', 'player_url': 'https://www.marketwatch.com/games/algoets-h2023/portfolio?pub=ySePrgIvU7dE', 'portfolio_value': '$1,000,000.00', 'gain_percentage': '0.00%', 'transactions': '0', 'gain': '$0.00'}]\n</code></pre>"},{"location":"explanation/","title":"Explaination","text":"<p>The MarketWatch Python library is a powerful tool for interacting with the MarketWatch virtual trading platform. Whether you're a seasoned trader or a beginner, this library provides an easy-to-use interface for performing various actions such as getting game details, portfolio information, buying and selling stocks, getting leaderboard information, and more.</p> <p>This library is particularly useful for users who want to automate their trading strategies or build trading bots. In this article, we will provide an explanation of the code and show how to get started with using the MarketWatch Python library.</p>"},{"location":"explanation/#authentication","title":"Authentication","text":"<p>To use the MarketWatch Python library, you will need to have a MarketWatch account If you don't already have an account, you can sign up for free on the MarketWatch website.</p> <p>https://register.marketwatch.com/register?type=mw-vse</p>"},{"location":"explanation/#example-usage","title":"Example Usage","text":"<p>Now that you have authenticated with the MarketWatch API, you can start making requests to it using the methods provided by the MarketWatch Python library. Let's take a look at an example of how to use the library to get your portfolio information:</p> <pre><code>mw = MarketWatch(\"email\", \"password\")\nportfolio = mw.get_portfolio()\nprint(portfolio)\n</code></pre> <p>This code will make a request to the MarketWatch API to retrieve your portfolio information and print it to the console. The <code>get_portfolio</code> method returns a dictionary containing information about the stocks you currently hold in your portfolio, such as the stock symbol, the number of shares, and the current value of each stock.</p> <p>We have provided an explanation of the MarketWatch Python library and shown how to get started with using it. The library provides an easy-to-use interface for interacting with the MarketWatch virtual trading platform, and is particularly useful for users who want to automate their trading strategies or build trading bots. If you have any questions or issues with using the library, please refer to the documentation or reach out to the developer community for help.</p>"},{"location":"getting-started/","title":"MarketWatch Python Library","text":"<p>This is a Python library for interacting with the MarketWatch virtual trading platform. The library provides an easy-to-use interface for performing various actions such as getting game details, portfolio information, buying and selling stocks, getting leaderboard information, and more.</p>"},{"location":"getting-started/#installation","title":"Installation","text":"<pre><code>pip install marketwatch\n</code></pre>"},{"location":"getting-started/#usage","title":"Usage","text":"<p>First, you need to create an account on MarketWatch and then create a virtual game.</p> <p>Once you have created a game, you will be able to get the game's <code>id</code> from its URL, which will be used throughout the library.</p> <pre><code>if __name__ == \"__main__\":\n    import os\n    username = os.environ.get(\"MARKETWATCH_USERNAME\")\n    password = os.environ.get(\"MARKETWATCH_PASSWORD\")\n\n    marketwatch = MarketWatch(username, password)\n</code></pre>"},{"location":"getting-started/#examples","title":"Examples","text":"<pre><code>import os\nfrom marketwatch import MarketWatch\n</code></pre> <pre><code># Login\nmw = MarketWatch(os.environ[\"MARKETWATCH_USERNAME\"], os.environ[\"MARKETWATCH_PASSWORD\"])\n</code></pre>"},{"location":"getting-started/#get-games","title":"Get Games","text":"<pre><code>mw.get_games()\n</code></pre> <p>This method returns a list of games the user has created or joined. For each game, you get its <code>name</code>, <code>url</code>, <code>id</code>, <code>return</code>, <code>total_return</code>, <code>rank</code>, <code>end</code>, and <code>players</code>.</p>"},{"location":"getting-started/#get-portfolio","title":"Get portfolio","text":"<pre><code>mw.get_portfolio(game_id)\n</code></pre> <p>This method returns a dictionary containing information about the user's portfolio, including the <code>ticker</code>, <code>quantity</code>, <code>price</code>, <code>value</code>, and <code>value_percentage</code> for each holding. <code>game_id</code> is the <code>id</code> of the game you want to retrieve the portfolio for.</p>"},{"location":"getting-started/#buy-and-sell-stocks","title":"Buy and Sell stocks","text":"<pre><code>mw.buy(game_id, ticker, quantity)\nmw.sell(game_id, ticker, quantity)\n</code></pre> <p>These methods allow the user to buy or sell stocks in the specified game. <code>game_id</code> is the <code>id</code> of the game you want to trade in, <code>ticker</code> is the stock's symbol, and <code>quantity</code> is the number of shares you want to buy or sell.</p>"},{"location":"getting-started/#get-leaderboard","title":"Get leaderboard","text":"<pre><code>mw.get_leaderboard(game_id)\n</code></pre> <p>This method returns a list of the top players in the specified game. For each player, you get their <code>rank</code>, <code>name</code>, <code>return</code>, and <code>return_percentage</code>. <code>game_id</code> is the <code>id</code> of the game you want to retrieve the leaderboard for.</p>"},{"location":"getting-started/#get-game-settings","title":"Get game settings","text":"<pre><code>mw.get_game_settings(game_id)\n</code></pre> <p>This method returns a dictionary containing information about the specified game, including the <code>id</code>, <code>name</code>, <code>description</code>, <code>end_date</code>, <code>currency</code>, <code>starting_balance</code>, <code>transaction_fee</code>, <code>margin_interest_rate</code>, <code>order_types</code>, and <code>leverage</code>.</p>"},{"location":"getting-started/#get-stock-price","title":"Get stock price","text":"<pre><code>mw.get_price(ticker)\n</code></pre> <p>This method returns the current price of the specified stock.</p>"},{"location":"getting-started/#get-positions","title":"Get positions","text":"<p><code>mw.get_positions(game_id)</code></p> <p>This method returns a list of the user's current positions in the specified game. For each position, you get the <code>ticker</code>, <code>quantity</code>, <code>price</code>, <code>gain</code>, <code>gain_percentage</code>, <code>value</code>, and <code>value_percentage</code>.</p>"},{"location":"getting-started/#get-pending-orders","title":"Get pending orders","text":"<p><code>mw.get_pending_orders(game_id)</code></p> <p>This method returns a list of the user's pending orders in the specified game. For each order, you get the <code>ticker</code>, <code>quantity</code>, <code>price</code>, <code>order_type</code>, and <code>expiration</code>.</p> <pre><code>if __name__ == \"__main__\":\n    import os\n    username = os.environ.get(\"MARKETWATCH_USERNAME\")\n    password = os.environ.get(\"MARKETWATCH_PASSWORD\")\n\n    marketwatch = MarketWatch(username, password)\n\n    print(f\"Price: {marketwatch.get_price('AAPL')} \\n\")\n    print(f\"Games: {marketwatch.get_games()} \\n\")\n\n    games1 = marketwatch.get_games()[0][\"name\"].lower().replace(\" \", \"-\")\n\n    print(f\"Game: {marketwatch.get_game(games1)} \\n\")\n    print(f\"Game Settings: {marketwatch.get_game_settings(games1)} \\n\")\n\n    print(f\"Leaderboard: {marketwatch.get_leaderboard(games1)} \\n\")\n    print(f\"Porfolio: {marketwatch.get_portfolio(games1)} \\n\")\n\n    print(f\"Position: {marketwatch.get_positions(games1)}\")\n    print(f\"Orders Pending: {marketwatch.get_pending_orders(games1)}\")\n    marketwatch.buy(games1, \"AAPL\", 100)\n\n    print(f\"Position diff: {marketwatch.get_positions(games1)}\")\n</code></pre>"},{"location":"reference/","title":"Reference","text":"<ul> <li>[MarketWatch_API] (https://github.com/kevindong/MarketWatch_API/)</li> <li>[pymarketwatch] (https://github.com/bwees/pymarketwatch)</li> </ul>"},{"location":"reference/#acknowledgements","title":"Acknowledgements","text":"<p>The documentation is built using the following tools:</p> <ul> <li>MkDocs</li> <li>mkdocstrings (for Python docstrings)</li> <li>Material for MkDocs (for the theme)</li> </ul>"},{"location":"tutorials/","title":"Tutorials","text":""}]}